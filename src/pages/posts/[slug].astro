---
import BaseLayout from '../../layouts/BaseLayout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import Pills from '../../components/Pills.astro';
import { getPostBySlug, getPosts, getFeatured, getAuthor } from '../../data/wp.ts';
import sanitizeHtml from 'sanitize-html';

// Generate static paths for all posts
export async function getStaticPaths() {
  const { items: posts } = await getPosts(1, 100); // Get all posts for static generation
  return posts.map(post => ({
    params: { slug: post.slug },
    props: { post }
  }));
}

const { post } = Astro.props;

if (!post) {
  return Astro.redirect('/404');
}

// Function to strip HTML tags for meta description
function stripHtml(html: string): string {
  return html.replace(/<[^>]*>/g, '').replace(/&[^;]+;/g, ' ').trim();
}

// Function to calculate read time
function calculateReadTime(content: string): string {
  const wordCount = stripHtml(content).split(/\s+/).length;
  const readTime = Math.ceil(wordCount / 200); // 200 words per minute
  return `${readTime} min`;
}

// Sanitize HTML content
function sanitizeContent(html: string): string {
  return sanitizeHtml(html, {
    allowedTags: ['p', 'h1', 'h2', 'h3', 'h4', 'a', 'img', 'ul', 'ol', 'li', 'pre', 'code', 'blockquote', 'hr', 'strong', 'em', 'br'],
    allowedAttributes: {
      'a': ['href', 'target', 'rel'],
      'img': ['src', 'alt', 'loading', 'decoding']
    },
    allowedSchemes: ['http', 'https', 'mailto'],
    transformTags: {
      'img': function(tagName: string, attribs: any) {
        return {
          tagName: 'img',
          attribs: {
            ...attribs,
            loading: 'lazy',
            decoding: 'async'
          }
        };
      }
    }
  });
}

// Get categories from embedded data
const categories = post._embedded?.['wp:term']?.[0] || [];

// Get author name and featured image using helper functions
const authorName = getAuthor(post);
const featuredImage = getFeatured(post);

// Format date
const formatDate = (dateString: string): string => {
  const date = new Date(dateString);
  return date.toLocaleDateString('en-US', { 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric' 
  });
};

const metaDescription = stripHtml(post.excerpt.rendered).substring(0, 160);
const sanitizedContent = sanitizeContent(post.content.rendered);
---

<BaseLayout 
  title={`${post.title.rendered} - nico.ar`} 
  description={metaDescription}
>
  <Header slot="header" />
  
  <article class="section">
    <!-- Featured image -->
    {featuredImage.src ? (
      <img 
        src={featuredImage.src} 
        alt={featuredImage.alt || post.title.rendered}
        style="width: 100%; aspect-ratio: 16/9; object-fit: cover; border-radius: 12px; margin-bottom: var(--sp-32);"
        loading="lazy"
        decoding="async"
      />
    ) : (
      <div style="background: #E5ECF3; aspect-ratio: 16/9; border-radius: 12px; margin-bottom: var(--sp-32);"></div>
    )}
    
    <!-- Categories -->
    {categories.length > 0 && (
      <div style="margin-bottom: var(--sp-24);">
        <Pills tags={categories} />
      </div>
    )}
    
    <!-- Article title -->
    <h1 style="margin-bottom: var(--sp-24);">{post.title.rendered}</h1>
    
    <!-- Meta information -->
    <div style="display: flex; gap: var(--sp-16); margin-bottom: var(--sp-48); font-size: 14px; color: #6C8096;">
      {authorName && <span>By {authorName}</span>}
      <span>{formatDate(post.date)}</span>
      <span>{calculateReadTime(post.content.rendered)}</span>
    </div>
    
    <!-- Article content -->
    <div class="article-content" set:html={sanitizedContent} />
  </article>
  
  <Footer slot="footer" />
</BaseLayout>

<style>
  .article-content {
    font-size: 22px;
    line-height: 36px;
  }
  
  .article-content p {
    margin-bottom: var(--sp-24);
  }
  
  .article-content h2 {
    margin-top: var(--sp-48);
    margin-bottom: var(--sp-24);
  }
  
  .article-content h3 {
    margin-top: var(--sp-32);
    margin-bottom: var(--sp-16);
  }
  
  .article-content img {
    border-radius: 12px;
    margin: var(--sp-32) 0;
  }
  
  .article-content blockquote {
    border-left: 4px solid var(--muted);
    padding-left: var(--sp-24);
    margin: var(--sp-32) 0;
    font-style: italic;
    color: #6C8096;
  }
  
  .article-content code {
    background: var(--pill-bg);
    padding: 2px 6px;
    border-radius: 4px;
    font-size: 0.9em;
  }
  
  .article-content pre {
    background: #f8f9fa;
    padding: var(--sp-24);
    border-radius: 8px;
    overflow-x: auto;
    margin: var(--sp-24) 0;
  }
  
  .article-content pre code {
    background: none;
    padding: 0;
  }
</style>
