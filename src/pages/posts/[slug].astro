---
import BaseLayout from '../../layouts/BaseLayout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import Pills from '../../components/Pills.astro';
import { getPostBySlug, getPosts, getFeatured, getAuthor } from '../../data/wp.ts';
import sanitizeHtml from 'sanitize-html';

// Generate static paths for all posts
export async function getStaticPaths() {
  try {
    const { items: posts } = await getPosts(1, 100); // Get all posts for static generation
    return posts.map(post => ({
      params: { slug: post.slug },
      props: { post }
    }));
  } catch (error) {
    console.error('Error generating static paths:', error);
    return [];
  }
}

const { post } = Astro.props;

if (!post) {
  return Astro.redirect('/404');
}

// Function to strip HTML tags for meta description
function stripHtml(html: string): string {
  return html.replace(/<[^>]*>/g, '').replace(/&[^;]+;/g, ' ').trim();
}

// Function to calculate read time
function calculateReadTime(content: string): string {
  const wordCount = stripHtml(content).split(/\s+/).length;
  const readTime = Math.ceil(wordCount / 200); // 200 words per minute
  return `${readTime} min`;
}

// Sanitize HTML content
function sanitizeContent(html: string): string {
  return sanitizeHtml(html, {
    allowedTags: ['p', 'h1', 'h2', 'h3', 'h4', 'a', 'img', 'ul', 'ol', 'li', 'pre', 'code', 'blockquote', 'hr', 'strong', 'em', 'br', 'figure', 'figcaption', 'div'],
    allowedAttributes: {
      'a': ['href', 'target', 'rel'],
      'img': ['src', 'alt', 'loading', 'decoding', 'width', 'height'],
      'figure': ['class'],
      'figcaption': ['class'],
      'div': ['class']
    },
    allowedSchemes: ['http', 'https', 'mailto'],
    allowedClasses: {
      'figure': ['wp-block-image', 'wp-caption'],
      'figcaption': ['wp-element-caption'],
      'div': ['wp-caption-text']
    },
    transformTags: {
      'img': function(tagName: string, attribs: any) {
        return {
          tagName: 'img',
          attribs: {
            ...attribs,
            loading: 'lazy',
            decoding: 'async'
          }
        };
      }
    }
  });
}

// Get categories from embedded data
const categories = post._embedded?.['wp:term']?.[0] || [];

// Get author name and featured image using helper functions
const authorName = getAuthor(post);
const featuredImage = getFeatured(post);

// Format date
const formatDate = (dateString: string): string => {
  const date = new Date(dateString);
  return date.toLocaleDateString('en-US', { 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric' 
  });
};

const metaDescription = stripHtml(post.excerpt.rendered).substring(0, 160);
const sanitizedContent = sanitizeContent(post.content.rendered);
---

<BaseLayout 
  title={`${post.title.rendered} - nico.ar`} 
  description={metaDescription}
>
  <Header slot="header" />
  
  <article class="section pt-4">
    <!-- Featured image -->
    {featuredImage.src ? (
      <img 
        src={featuredImage.src} 
        alt={featuredImage.alt || post.title.rendered}
        class="article-hero"
        loading="lazy"
        decoding="async"
      />
    ) : (
      <div class="article-hero--placeholder"></div>
    )}
    
    <!-- Categories -->
    {categories.length > 0 && (
      <div class="article-pills">
        <Pills tags={categories} />
      </div>
    )}
    
    <!-- Article title -->
    <h1 class="article-title">{post.title.rendered}</h1>
    
    <!-- Meta information -->
    <div class="article-meta">
      {authorName && <span>By {authorName}</span>}
      <span>{formatDate(post.date)}</span>
      <span>{calculateReadTime(post.content.rendered)}</span>
    </div>
    
    <!-- Article content -->
    <div class="article-content" set:html={sanitizedContent} />
  </article>
  
  <Footer slot="footer" />
</BaseLayout>
